{"version":3,"sources":["components/TimerLengthControl.js","components/InitialState.js","PomodoroClock.js","serviceWorker.js","index.js"],"names":["LengthControler","className","id","this","props","idTitle","title","decrementId","value","onClick","idLength","length","incrementId","React","Component","initialState","brkLength","sesLength","timerState","timerType","timer","intervalID","alarmColor","color","PomodoroClock","state","setBreak","bind","setSession","e","lengthModifier","currentTarget","stateToModify","operator","currentLength","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAEqBA,G,6KAEb,OACI,yBAAKC,UAAU,kBACX,yBAAKC,GAAIC,KAAKC,MAAMC,SAAUF,KAAKC,MAAME,OACzC,4BAAQJ,GAAIC,KAAKC,MAAMG,YACnBN,UAAU,cACVO,MAAM,IACNC,QAASN,KAAKC,MAAMK,SAHxB,QAKA,yBAAKP,GAAIC,KAAKC,MAAMM,UAAWP,KAAKC,MAAMO,QAC1C,4BAAQT,GAAIC,KAAKC,MAAMQ,YACfX,UAAU,cACVO,MAAM,IACNC,QAASN,KAAKC,MAAMK,SAH5B,W,GAX6BI,IAAMC,YCQpCC,EAVM,CACjBC,UAAW,EACXC,UAAW,GACXC,WAAY,UACZC,UAAW,UACXC,MAAO,KACPC,WAAY,GACZC,WAAY,CAACC,MAAO,UC0CTC,E,kDA3Cb,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IACCqB,MAAQV,EAEjB,EAAKW,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBALA,E,qDAOTE,GACP1B,KAAK2B,eAAe,YAAaD,EAAEE,cAAcvB,MACjDL,KAAKsB,MAAMT,UAAW,W,iCAEba,GACT1B,KAAK2B,eAAe,YAAaD,EAAEE,cAAcvB,MACjDL,KAAKsB,MAAMR,UAAW,a,qCAETe,EAAeC,EAAUC,EAAef,GACrC,MAAbc,GAAoBC,EAAgB,GACrC/B,KAAKgC,SAAL,eAAgBH,EAAgBE,EAAgB,IAE5B,MAAbD,GAAoBC,EAAgB,GAC3C/B,KAAKgC,SAAL,eAAgBH,EAAgBE,EAAgB,M,+BAIlD,OACE,yBAAKjC,UAAU,SACb,kBAAC,EAAD,CAAkBI,QAAQ,eACRE,YAAY,kBACZK,YAAY,kBACZN,MAAM,eACNK,OAAQR,KAAKsB,MAAMT,UACnBP,QAASN,KAAKuB,WAChC,kBAAC,EAAD,CAAkBrB,QAAS,iBACTE,YAAY,oBACZK,YAAY,oBACZN,MAAM,iBACNK,OAAQR,KAAKsB,MAAMR,UACnBR,QAASN,KAAKyB,kB,GAtCZf,IAAMC,W,iBCOdsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.51bb5520.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class LengthControler extends React.Component{\n    render(){\n        return (\n            <div className=\"length-control\">\n                <div id={this.props.idTitle}>{this.props.title}</div>\n                <button id={this.props.decrementId}\n                    className=\"control-btn\"\n                    value='-'\n                    onClick={this.props.onClick}>Down\n                </button>\n                <div id={this.props.idLength}>{this.props.length}</div>\n                <button id={this.props.incrementId}\n                        className=\"control-btn\"\n                        value='+'\n                        onClick={this.props.onClick}>Up\n                </button>\n            </div>\n        )\n    }\n}","const initialState = {\n    brkLength: 5,\n    sesLength: 25,\n    timerState: 'stopped',\n    timerType: 'Session',\n    timer: 1500,\n    intervalID: '',\n    alarmColor: {color: 'white'}\n}\n\nexport default initialState;","import React from 'react';\nimport './App.min.css';\nimport LengthControler from './components/TimerLengthControl';\nimport initialState from './components/InitialState';\n\nclass PomodoroClock extends React.Component {\n  constructor(props){\n    super(props);\n      this.state = initialState;\n\n  this.setBreak = this.setBreak.bind(this);\n  this.setSession = this.setSession.bind(this);\n  }\n  setBreak(e){\n    this.lengthModifier('brkLength', e.currentTarget.value,\n    this.state.brkLength, 'Break')\n  }\n  setSession(e){\n    this.lengthModifier('sesLength', e.currentTarget.value,\n    this.state.sesLength, 'Session')\n  }\n  lengthModifier(stateToModify, operator, currentLength, timerType){\n    if(operator === '+' && currentLength < 60 ) {\n      this.setState({[stateToModify]: currentLength + 1})\n    }\n    else if (operator === '-' && currentLength > 1 ) {\n      this.setState({[stateToModify]: currentLength - 1})\n    }\n  }\n  render(){\n    return (\n      <div className=\"timer\">\n        <LengthControler  idTitle='break-length'\n                          decrementId='break-decrement'\n                          incrementId='break-increment'\n                          title='Break Length'\n                          length={this.state.brkLength}\n                          onClick={this.setBreak}/>\n        <LengthControler  idTitle= 'session-length'\n                          decrementId='session-decrement'\n                          incrementId='session-increment'\n                          title='Session Length'\n                          length={this.state.sesLength}\n                          onClick={this.setSession}/>\n      </div>\n    );\n  }\n}\n\nexport default PomodoroClock;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PomodoroClock from './PomodoroClock';\nimport ReactFCCtest from 'react-fcctest';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PomodoroClock/>\n    <ReactFCCtest/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}